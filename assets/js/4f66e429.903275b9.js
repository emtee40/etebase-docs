"use strict";(self.webpackChunketebase_docs=self.webpackChunketebase_docs||[]).push([[678],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(a),m=r,b=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return a?n.createElement(b,l(l({ref:t},c),{},{components:a})):n.createElement(b,l({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},8215:function(e,t,a){a.d(t,{Z:function(){return r}});var n=a(7294);function r(e){var t=e.children,a=e.hidden,r=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:r},t)}},3709:function(e,t,a){a.d(t,{Z:function(){return d}});var n=a(7294),r=a(7462),o=a(2389),l=a(5979),i=a(6010),s="tabItem_LplD";function u(e){var t,a,o,u=e.lazy,c=e.block,d=e.defaultValue,p=e.values,m=e.groupId,b=e.className,f=n.Children.map(e.children,(function(e){if((0,n.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=p?p:f.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),v=(0,l.lx)(y,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===d?d:null!=(t=null!=d?d:null==(a=f.find((function(e){return e.props.default})))?void 0:a.props.value)?t:null==(o=f[0])?void 0:o.props.value;if(null!==k&&!y.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=(0,l.UB)(),h=g.tabGroupChoices,T=g.setTabGroupChoices,_=(0,n.useState)(k),E=_[0],N=_[1],w=[],x=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var O=h[m];null!=O&&O!==E&&y.some((function(e){return e.value===O}))&&N(O)}var I=function(e){var t=e.currentTarget,a=w.indexOf(t),n=y[a].value;n!==E&&(x(t),N(n),null!=m&&T(m,n))},j=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n=w.indexOf(e.currentTarget)+1;a=w[n]||w[0];break;case"ArrowLeft":var r=w.indexOf(e.currentTarget)-1;a=w[r]||w[w.length-1]}null==(t=a)||t.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":c},b)},y.map((function(e){var t=e.value,a=e.label,o=e.attributes;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:E===t?0:-1,"aria-selected":E===t,key:t,ref:function(e){return w.push(e)},onKeyDown:j,onFocus:I,onClick:I},o,{className:(0,i.Z)("tabs__item",s,null==o?void 0:o.className,{"tabs__item--active":E===t})}),null!=a?a:t)}))),u?(0,n.cloneElement)(f.filter((function(e){return e.props.value===E}))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},f.map((function(e,t){return(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==E})}))))}function c(e){var t=(0,o.Z)();return n.createElement(u,(0,r.Z)({key:String(t)},e))}function d(e){var t=e.children;return n.createElement(c,{defaultValue:"js",groupId:"programming-language",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Java",value:"java"},{label:"Kotlin",value:"kt"},{label:"C/C++",value:"c"},{label:"Rust",value:"rs"}]},t)}},5486:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return u},metadata:function(){return d},toc:function(){return m}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),l=a(3709),i=a(8215),s=["components"],u={title:"Utilities"},c=void 0,d={unversionedId:"api/utilities",id:"api/utilities",title:"Utilities",description:"In addition to the main API, Etebase provides a few utility functions to make development easier.",source:"@site/docs/api/utilities.mdx",sourceDirName:"api",slug:"/api/utilities",permalink:"/api/utilities",editUrl:"https://github.com/etesync/etebase-docs/edit/master/docs/api/utilities.mdx",tags:[],version:"current",frontMatter:{title:"Utilities"},sidebar:"someSidebar",previous:{title:"Local Cache",permalink:"/guides/local_cache"},next:{title:"Introduction",permalink:"/type-specs/introduction"}},p={},m=[{value:"Base64",id:"base64",level:2},{value:"Random bytes",id:"random-bytes",level:2}],b={toc:m};function f(e){var t=e.components,a=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},b,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In addition to the main API, Etebase provides a few utility functions to make development easier."),(0,o.kt)("h2",{id:"base64"},"Base64"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Base64"},"Base64")," is a popular way to encode binary data to an ASCII string format, and is used throughout Etebase.\nWe use the ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Base64#The_URL_applications"},"URL-friendly variant")," and provide functions to convert to and from it."),(0,o.kt)(l.Z,{mdxType:"CodeTabs"},(0,o.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const binaryData = Uint8Array.from([1, 2, 3]);\n\nconst b64encoded = Etebase.toBase64(binaryData);\nconst decoded = Etebase.fromBase64(b64encoded);\n// decoded is equal to binaryData\n"))),(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from etebase import Base64Url\n\nbinary_data = b"test"\n\nb64encoded = Base64Url.to_base64(binary_data);\ndecoded = Base64Url.from_base64(b64encoded);\n# decoded is equal to binary_data\n'))),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'import com.etebase.client.Utils;\n\nbyte[] binaryData = "test".getBytes("UTF-8");\n\nString b64encoded = Utils.toBase64(binaryData);\nbyte[] decoded = Utils.fromBase64(b64encoded);\n// decoded is equal to binaryData\n'))),(0,o.kt)(i.Z,{value:"kt",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'import com.etebase.client.Utils\n\nval binaryData = "test".toByteArray()\n\nval b64encoded = Utils.toBase64(binaryData)\nval decoded = Utils.fromBase64(b64encoded)\n// decoded is equal to binaryData\n'))),(0,o.kt)(i.Z,{value:"c",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'const char *text = "Test";\n// We use +1 because we want to also encode the \\0\nchar encoded[ETEBASE_UTILS_TO_BASE64_MAX_LEN(strlen(text) + 1)];\netebase_utils_to_base64(text, strlen(text) + 1, encoded, sizeof(encoded));\n\nchar decoded[ETEBASE_UTILS_FROM_BASE64_MAX_LEN(strlen(encoded))];\nuintptr_t decoded_len = 0;\netebase_utils_from_base64(encoded, decoded, sizeof(decoded), &decoded_len);\n// decode is equal to text\n'))),(0,o.kt)(i.Z,{value:"rs",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use etebase::utils;\n\nlet binary_data = b"test";\n\nlet b64_encoded = utils::to_base64(binary_data)?;\nlet decoded = utils::from_base64(&b64_encoded)?;\n// decoded is equal to binary_data\nassert_eq!(decoded, binary_data);\n')))),(0,o.kt)("h2",{id:"random-bytes"},"Random bytes"),(0,o.kt)("p",null,"Getting secure random data is at the core of almost every cryptographic operation.\nEtebase takes care of the cryptography for you so you won't often need to generate random data on your own, but for when you do:"),(0,o.kt)(l.Z,{mdxType:"CodeTabs"},(0,o.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Wait for Etebase to be ready.\n// Note: if you already have an Account instance you don't need to manually wait.\nawait Etebase.ready;\n\n// Generate 32 random bytes\nconst randomData = Etebase.randomBytes(32);\n"))),(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from etebase import random_bytes\n\n# Generate 32 random bytes\nrandom_data = random_bytes(32)\n"))),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"import com.etebase.client.Utils;\n\n// Generate 32 random bytes\nbyte[] randomData = Utils.randomBytes(32);\n"))),(0,o.kt)(i.Z,{value:"kt",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"import com.etebase.client.Utils\n\n// Generate 32 random bytes\nval randomData = Utils.randomBytes(32)\n"))),(0,o.kt)(i.Z,{value:"c",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"// Generate 32 random bytes\nchar buf[32];\netebase_utils_randombytes(buf, sizeof(buf));\n"))),(0,o.kt)(i.Z,{value:"rs",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"use etebase::utils;\n\n// Generate 32 random bytes\nlet random_data = utils::randombytes(32);\n")))))}f.isMDXComponent=!0}}]);