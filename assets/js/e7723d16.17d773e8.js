"use strict";(self.webpackChunketebase_docs=self.webpackChunketebase_docs||[]).push([[324],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return g}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(t),g=i,v=p["".concat(l,".").concat(g)]||p[g]||u[g]||r;return t?a.createElement(v,o(o({ref:n},m),{},{components:t})):a.createElement(v,o({ref:n},m))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8215:function(e,n,t){t.d(n,{Z:function(){return i}});var a=t(7294);function i(e){var n=e.children,t=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:i},n)}},3709:function(e,n,t){t.d(n,{Z:function(){return u}});var a=t(7294),i=t(7462),r=t(2389),o=t(5979),s=t(6010),l="tabItem_LplD";function c(e){var n,t,r,c=e.lazy,m=e.block,u=e.defaultValue,p=e.values,g=e.groupId,v=e.className,b=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),d=null!=p?p:b.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),_=(0,o.lx)(d,(function(e,n){return e.value===n.value}));if(_.length>0)throw new Error('Docusaurus error: Duplicate values "'+_.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===u?u:null!=(n=null!=u?u:null==(t=b.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(r=b[0])?void 0:r.props.value;if(null!==y&&!d.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+d.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=(0,o.UB)(),h=k.tabGroupChoices,f=k.setTabGroupChoices,T=(0,a.useState)(y),N=T[0],M=T[1],w=[],I=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var x=h[g];null!=x&&x!==N&&d.some((function(e){return e.value===x}))&&M(x)}var E=function(e){var n=e.currentTarget,t=w.indexOf(n),a=d[t].value;a!==N&&(I(n),M(a),null!=g&&f(g,a))},Z=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=w.indexOf(e.currentTarget)+1;t=w[a]||w[0];break;case"ArrowLeft":var i=w.indexOf(e.currentTarget)-1;t=w[i]||w[w.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":m},v)},d.map((function(e){var n=e.value,t=e.label,r=e.attributes;return a.createElement("li",(0,i.Z)({role:"tab",tabIndex:N===n?0:-1,"aria-selected":N===n,key:n,ref:function(e){return w.push(e)},onKeyDown:Z,onFocus:E,onClick:E},r,{className:(0,s.Z)("tabs__item",l,null==r?void 0:r.className,{"tabs__item--active":N===n})}),null!=t?t:n)}))),c?(0,a.cloneElement)(b.filter((function(e){return e.props.value===N}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},b.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==N})}))))}function m(e){var n=(0,r.Z)();return a.createElement(c,(0,i.Z)({key:String(n)},e))}function u(e){var n=e.children;return a.createElement(m,{defaultValue:"js",groupId:"programming-language",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Java",value:"java"},{label:"Kotlin",value:"kt"},{label:"C/C++",value:"c"},{label:"Rust",value:"rs"}]},n)}},1661:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return m},default:function(){return b},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return g}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),o=t(3709),s=t(8215),l=["components"],c={title:"Collection Sharing"},m=void 0,u={unversionedId:"guides/collection_sharing",id:"guides/collection_sharing",title:"Collection Sharing",description:"In the future we will have more ways to share collections among users (e.g: PAKE), but until we do, the only way to share is using public-key cryptography which is what this section is about.",source:"@site/docs/guides/collection_sharing.mdx",sourceDirName:"guides",slug:"/guides/collection_sharing",permalink:"/guides/collection_sharing",editUrl:"https://github.com/etesync/etebase-docs/edit/master/docs/guides/collection_sharing.mdx",tags:[],version:"current",frontMatter:{title:"Collection Sharing"},sidebar:"someSidebar",previous:{title:"Using Items",permalink:"/guides/using_items"},next:{title:"Revision history",permalink:"/guides/revisions"}},p={},g=[{value:"Getting your public key",id:"getting-your-public-key",level:2},{value:"Pretty-print the public key",id:"pretty-print-the-public-key",level:3},{value:"Sending invitations",id:"sending-invitations",level:2},{value:"Responding to invitations",id:"responding-to-invitations",level:2},{value:"Leaving collections",id:"leaving-collections",level:2},{value:"Controlling access",id:"controlling-access",level:2},{value:"Listing collection members",id:"listing-collection-members",level:3},{value:"Modifying access level",id:"modifying-access-level",level:3},{value:"Revoking access",id:"revoking-access",level:3},{value:"Iterating through responses",id:"iterating-through-responses",level:2}],v={toc:g};function b(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},v,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"In the future we will have more ways to share collections among users (e.g: ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Password-authenticated_key_agreement"},"PAKE"),"), but until we do, the only way to share is using ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Public-key_cryptography"},"public-key cryptography")," which is what this section is about."))),(0,r.kt)("p",null,"This section assumes you have already read the ",(0,r.kt)("a",{parentName:"p",href:"./using_collections"},"collections")," section and are familiar with collections."),(0,r.kt)("p",null,"Collections can be shared among users for easy collaboration. This can be used for sharing files between users, editing a shared document, or giving others access to parts of your account (e.g. a calendar)."),(0,r.kt)("h2",{id:"getting-your-public-key"},"Getting your public key"),(0,r.kt)("p",null,"An important part of using public key cryptography is making sure the other side of the interaction is whoever you think it is. This can be achieved by verifying each-other's public key. Your public key, as the name implies, is public, so feel free to share it with others."),(0,r.kt)("p",null,"Getting your public key:"),(0,r.kt)(o.Z,{mdxType:"CodeTabs"},(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const etebase = await Etebase.Account.login("username", "password");\nconst invitationManager = etebase.getInvitationManager();\n\n// You can now share your pubkey\nconst myPubkey = invitationManager.pubkey;\n'))),(0,r.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"etebase = Account.login(...)\ninvitation_manager = etebase.get_invitation_manager()\n\n# You can now share your pubkey\ninvitation_manager.pubkey\n"))),(0,r.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Account etebase = Account.login(...);\nCollectionInvitationManager invitationManager = etebase.getInvitationManager();\n\n// You can now share your pubkey\nbyte[] myPubkey = invitationManager.getPubkey();\n"))),(0,r.kt)(s.Z,{value:"kt",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val etebase = Account.login(...)\nval invitationManager = etebase.invitationManager\n\n// You can now share your pubkey\nval myPubkey = invitationManager.pubkey\n"))),(0,r.kt)(s.Z,{value:"c",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"EtebaseAccount *etebase = etebase_account_login(...);\n\nEtebaseCollectionInvitationManager *invitation_manager = etebase_account_get_invitation_manager(etebase);\n\n// You can now share your pubkey\nconst char *my_pubkey = etebase_invitation_manager_get_pubkey(invitation_manager);\nuintptr_t pubkey_size = etebase_invitation_manager_get_pubkey_size(invitation_manager);\n\netebase_invitation_manager_destroy(invitation_manager);\n"))),(0,r.kt)(s.Z,{value:"rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let etebase = Account::login(...)?;\n\nlet invitation_manager = etebase.invitation_manager()?;\n\n// You can now share your pubkey\nlet my_pubkey = invitation_manager.pubkey();\n")))),(0,r.kt)("h3",{id:"pretty-print-the-public-key"},"Pretty-print the public key"),(0,r.kt)("p",null,"You would almost always want users to compare public keys in a secure manner (usually phone, in-person, or secure chat).\nThe following function formats the pubkey for you in a way that's easy for users to compare, so you don't have to figure it out yourself."),(0,r.kt)(o.Z,{mdxType:"CodeTabs"},(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// The delimiter parameter is optional and defaults to "   "\nconst delimiter = "   ";\nconst prettyFingerprint = Etebase.getPrettyFingerprint(myPubkey, delimiter);\n\nconsole.log(prettyFingerprint);\n/* Output:\n45680   71497   88570   93128\n19189   84243   25687   20837\n47924   46071   54113   18789\n*/\n'))),(0,r.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from etebase import pretty_fingerprint\n\nfingerprint = pretty_fingerprint(my_pubkey)\n\nprint(fingerprint)\n# Output:\n# 45680   71497   88570   93128\n# 19189   84243   25687   20837\n# 47924   46071   54113   18789\n"))),(0,r.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"String prettyFingerprint = Utils.getPrettyFingerprint(myPubkey);\n\n/* prettyFingerprint:\n45680   71497   88570   93128\n19189   84243   25687   20837\n47924   46071   54113   18789\n*/\n"))),(0,r.kt)(s.Z,{value:"kt",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val prettyFingerprint = Utils.getPrettyFingerprint(myPubkey)\n\n/* prettyFingerprint:\n45680   71497   88570   93128\n19189   84243   25687   20837\n47924   46071   54113   18789\n*/\n"))),(0,r.kt)(s.Z,{value:"c",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"char pretty[ETEBASE_UTILS_PRETTY_FINGERPRINT_SIZE];\netebase_utils_pretty_fingerprint(my_pubkey, my_pubkey_size, pretty);\n\n/* prettyFingerprint:\n45680   71497   88570   93128\n19189   84243   25687   20837\n47924   46071   54113   18789\n*/\n"))),(0,r.kt)(s.Z,{value:"rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let pretty_fingerprint = utils::pretty_fingerprint(my_pubkey);\n\n/* pretty_fingerprint:\n45680   71497   88570   93128\n19189   84243   25687   20837\n47924   46071   54113   18789\n*/\n")))),(0,r.kt)("p",null,"The format we use is similar to the one used by ",(0,r.kt)("a",{parentName:"p",href:"https://signal.org"},"Signal"),". Please refer to ",(0,r.kt)("a",{parentName:"p",href:"https://signal.org/blog/safety-number-updates/"},"their post")," for more information about it."),(0,r.kt)("h2",{id:"sending-invitations"},"Sending invitations"),(0,r.kt)("p",null,"The first step towards sharing collections with other users is sending them an invitation. Only a collection admin can send an invitation, so make sure you are one before trying to invite users."),(0,r.kt)(o.Z,{mdxType:"CodeTabs"},(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const invitationManager = etebase.getInvitationManager();\n\n// Fetch their public key\nconst user2 = await invitationManager.fetchUserProfile("username2");\n\n// Verify user2.pubkey is indeed the pubkey you expect.\n// This is done in a secure channel (e.g. encrypted chat or in person)\n\n// Assuming the pubkey is as expected, send the invitation\nawait invitationManager.invite(collection, "username2", user2.pubkey,\n                               Etebase.CollectionAccessLevel.ReadOnly);\n'))),(0,r.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'invitation_manager = etebase.get_invitation_manager()\n\n# Fetch their public key\nuser2 = invitation_manager.fetch_user_profile("username2");\n\n# Verify user2.pubkey is indeed the pubkey you expect.\n# This is done in a secure channel (e.g. encrypted chat or in person)\n\n# Assuming the pubkey is as expected, send the invitation\ninvitation_manager.invite(collection, "username2", user2.pubkey, CollectionAccessLevel.ReadOnly)\n'))),(0,r.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'CollectionInvitationManager invitationManager = etebase.getInvitationManager();\n\n// Fetch their public key\nUserProfile user2 = invitationManager.fetchUserProfile("username2");\n\n// Verify user2.pubkey is indeed the pubkey you expect.\n// This is done in a secure channel (e.g. encrypted chat or in person)\n\n// Assuming the pubkey is as expected, send the invitation\ninvitationManager.invite(collection, "username2", user2.getPubkey(), CollectionAccessLevel.ReadOnly);\n'))),(0,r.kt)(s.Z,{value:"kt",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val invitationManager = etebase.invitationManager\n\n// Fetch their public key\nval user2 = invitationManager.fetchUserProfile("username2")\n\n// Verify user2.pubkey is indeed the pubkey you expect.\n// This is done in a secure channel (e.g. encrypted chat or in person)\n\n// Assuming the pubkey is as expected, send the invitation\ninvitationManager.invite(collection, "username2", user2.pubkey, CollectionAccessLevel.ReadOnly)\n'))),(0,r.kt)(s.Z,{value:"c",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'EtebaseCollectionInvitationManager *invitation_manager = etebase_account_get_invitation_manager(etebase);\n\n// Fetch their public key\nEtebaseUserProfile *user2 = etebase_invitation_manager_fetch_user_profile(invitation_manager, "username2");\n\n// Verify user2.pubkey is indeed the pubkey you expect.\n// This is done in a secure channel (e.g. encrypted chat or in person)\n\n// Assuming the pubkey is as expected, send the invitation\netebase_invitation_manager_invite(invitation_manager, col, "username2",\n        etebase_user_profile_get_pubkey(user2), etebase_user_profile_get_pubkey_size(user2),\n        ETEBASE_COLLECTION_ACCESS_LEVEL_READ_ONLY);\n\netebase_user_profile_destroy(user2);\netebase_invitation_manager_destroy(invitation_manager);\n'))),(0,r.kt)(s.Z,{value:"rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let invitation_manager = etebase.invitation_manager()?;\n\n// Fetch their public key\nlet user2 = invitation_manager.fetch_user_profile("username2")?;\n\n// Verify user2.pubkey is indeed the pubkey you expect.\n// This is done in a secure channel (e.g. encrypted chat or in person)\n\n// Assuming the pubkey is as expected, send the invitation\ninvitation_manager.invite(collection, "username2", user2.pubkey(), CollectionAccessLevel::ReadOnly)?;\n')))),(0,r.kt)("p",null,"As you can see from the example above, when inviting a user you also set the wanted access level. Allowed values are: ",(0,r.kt)("inlineCode",{parentName:"p"},"Admin"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ReadWrite"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"ReadOnly"),"."),(0,r.kt)("h2",{id:"responding-to-invitations"},"Responding to invitations"),(0,r.kt)("p",null,"In the previous example we sent an access invitation to ",(0,r.kt)("inlineCode",{parentName:"p"},"user2"),". In this section we will see how to respond to these invitations."),(0,r.kt)(o.Z,{mdxType:"CodeTabs"},(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// login as user2\nconst etebase = await Etebase.Account.login("username2", "password");\nconst invitationManager = etebase.getInvitationManager();\n\n// List pending invitations\nconst invitations = await invitationManager.listIncoming();\nconst invitation = invitations.data[0]; // get first invitation\n\n// Verify the sender\'s pubkey is indeed the pubkey you expect.\n// This is done in a secure channel (e.g. encrypted chat or in person)\nconst fromPubkey = invitation.fromPubkey;\n\n// We can now either accept\nawait invitationManager.accept(invitation);\n// or reject the invitation:\nawait invitationManager.reject(invitation);\n'))),(0,r.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# login as user2\netebase = Account.login(client, "username2", "password")\ninvitation_manager = etebase.get_invitation_manager()\n\n# List pending invitations\ninvitations = invitation_manager.list_incoming()\ninvitation = list(invitations.data)[0]  # get first invitation\n\n# Verify the sender\'s pubkey is indeed the pubkey you expect.\n# This is done in a secure channel (e.g. encrypted chat or in person)\nfrom_pubkey = invitation.from_pubkey\nconst fromPubkey = invitation.fromPubkey;\n\n# We can now either accept\ninvitation_manager.accept(invitation)\n# or reject the invitation:\ninvitation_manager.reject(invitation)\n'))),(0,r.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// login as user2\nAccount etebase = Account.login("username2", "password");\nCollectionInvitationManager invitationManager = etebase.getInvitationManager();\n\n// List pending invitations\nInvitationListResponse invitations = invitationManager.listIncoming();\nSignedInvitation invitation = invitations.getData()[0]; // get first invitation\n\n// Verify the sender\'s pubkey is indeed the pubkey you expect.\n// This is done in a secure channel (e.g. encrypted chat or in person)\nbyte[] fromPubkey = invitation.getFromPubkey();\n\n// We can now either accept\ninvitationManager.accept(invitation);\n// or reject the invitation:\ninvitationManager.reject(invitation);\n'))),(0,r.kt)(s.Z,{value:"kt",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'// login as user2\nval etebase = Account.login("username2", "password")\nval invitationManager = etebase.invitationManager\n\n// List pending invitations\nval invitations = invitationManager.listIncoming()\nval invitation = invitations.data[0] // get first invitation\n\n// Verify the sender\'s pubkey is indeed the pubkey you expect.\n// This is done in a secure channel (e.g. encrypted chat or in person)\nval fromPubkey = invitation.fromPubkey\n\n// We can now either accept\ninvitationManager.accept(invitation)\n// or reject the invitation:\ninvitationManager.reject(invitation)\n'))),(0,r.kt)(s.Z,{value:"c",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'// login as user2\nEtebaseAccount *etebase = etebase_account_login(client, "username2", "password");\nEtebaseCollectionInvitationManager *invitation_manager = etebase_account_get_invitation_manager(etebase);\n\n// List pending invitations\nEtebaseInvitationListResponse *invitations = etebase_invitation_manager_list_incoming(invitation_manager, NULL);\n\nuintptr_t data_len = etebase_invitation_list_response_get_data_length(invitations);\nconst EtebaseSignedInvitation *data[data_len];\netebase_invitation_list_response_get_data(invitations, data);\n\nconst EtebaseSignedInvitation *invitation = data[0];\n\n// Verify the sender\'s pubkey is indeed the pubkey you expect.\n// This is done in a secure channel (e.g. encrypted chat or in person)\nconst void *from_pubkey = etebase_signed_invitation_get_from_pubkey(invitation);\n\n// We can now either accept\netebase_invitation_manager_accept(invitation_manager, invitation);\n// or reject the invitation:\netebase_invitation_manager_reject(invitation_manager, invitation);\n\netebase_invitation_list_response_destroy(invitations);\n\netebase_invitation_manager_destroy(invitation_manager);\n'))),(0,r.kt)(s.Z,{value:"rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// login as user2\nlet etebase = Account::login(client, "username2", "password")?;\nlet invitation_manager = etebase.invitation_manager()?;\n\n// List pending invitations\nlet invitations = invitation_manager.list_incoming(None)?;\nlet invitation = &invitations.data()[0]; // get first invitation\n\n// Verify the sender\'s pubkey is indeed the pubkey you expect.\n// This is done in a secure channel (e.g. encrypted chat or in person)\nlet from_pubkey = invitation.from_pubkey();\n\n// We can now either accept\ninvitation_manager.accept(&invitation)?;\n// or reject the invitation:\ninvitation_manager.reject(&invitation)?;\n')))),(0,r.kt)("h2",{id:"leaving-collections"},"Leaving collections"),(0,r.kt)("p",null,"Sometimes a user may want to leave a collection he has been invited to. This can be done as follows:"),(0,r.kt)(o.Z,{mdxType:"CodeTabs"},(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const memberManager = collectionManager.getMemberManager(collection);\n\nawait memberManager.leave();\n"))),(0,r.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"member_manager = col_mgr.get_member_manager(collection)\n\nmember_manager.leave()\n"))),(0,r.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"CollectionMemberManager memberManager = colMgr.getMemberManager(collection);\n\nmemberManager.leave();\n"))),(0,r.kt)(s.Z,{value:"kt",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val memberManager = colMgr.getMemberManager(collection)\n\nmemberManager.leave()\n"))),(0,r.kt)(s.Z,{value:"c",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"EtebaseCollectionMemberManager *member_manager = etebase_collection_manager_get_member_manager(col_mgr, col);\n\netebase_collection_member_manager_leave(member_manager);\n\netebase_collection_member_manager_destroy(member_manager);\n"))),(0,r.kt)(s.Z,{value:"rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let member_manager = collection_manager.member_manager(collection)?;\n\nmember_manager.leave()?;\n")))),(0,r.kt)("h2",{id:"controlling-access"},"Controlling access"),(0,r.kt)("p",null,"Like with invitations, only collection admins can see who has access to a collection, modify access levels and revoke access altogether."),(0,r.kt)("h3",{id:"listing-collection-members"},"Listing collection members"),(0,r.kt)(o.Z,{mdxType:"CodeTabs"},(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const memberManager = collectionManager.getMemberManager(collection);\n\nconst members = await memberManager.list();\n\n// Print the users and their access levels\nfor (const member of members.data) {\n  console.log(member.username, member.accessLevel);\n}\n"))),(0,r.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"member_manager = col_mgr.get_member_manager(collection)\n\nmembers = member_manager.list()\n\n# Print the users and their access levels\nfor member in members.data:\n    print(member.username, member.access_level)\n"))),(0,r.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"CollectionMemberManager memberManager = colMgr.getMemberManager(collection);\n\nMemberListResponse members = memberManager.list();\n\n// Print the users and their access levels\nfor (CollectionMember member: members.getData()) {\n    System.out.println(member.getUsername(), member.getAccessLevel());\n}\n"))),(0,r.kt)(s.Z,{value:"kt",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val memberManager = colMgr.getMemberManager(collection)\n\nval members = memberManager.list()\n\n// Print the users and their access levels\nfor (member in members.data) {\n    System.out.println(member.username, member.accessLevel)\n}\n"))),(0,r.kt)(s.Z,{value:"c",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'EtebaseCollectionMemberManager *member_manager = etebase_collection_manager_get_member_manager(col_mgr, col);\n\nEtebaseMemberListResponse *members = etebase_collection_member_manager_list(member_manager, NULL);\n\nuintptr_t data_len = etebase_member_list_response_get_data_length(members);\nconst EtebaseCollectionMember *data[data_len];\netebase_member_list_response_get_data(members, data);\n\n// Print the users and their access levels\nfor (int i = 0 ; i < data_len ; i++) {\n    const EtebaseCollectionMember *member = data[i];\n    printf("%s\\n", etebase_collection_member_get_username(member));\n}\n\netebase_member_list_response_destroy(members);\netebase_collection_member_manager_destroy(member_manager);\n'))),(0,r.kt)(s.Z,{value:"kt",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'let member_manager = collection_manager.member_manager(collection)?;\n\nlet members = member_manager.list(None)?;\n\n// Print the users and their access levels\nfor member in members.data() {\n    println!("{}\xa0{:?}", member.username(), member.access_level());\n}\n')))),(0,r.kt)("h3",{id:"modifying-access-level"},"Modifying access level"),(0,r.kt)(o.Z,{mdxType:"CodeTabs"},(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const memberManager = collectionManager.getMemberManager(collection);\n\nconst newAccessLevel = Etebase.CollectionAccessLevel.ReadWrite;\nawait memberManager.modifyAccessLevel("username2", newAccessLevel);\n'))),(0,r.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'member_manager = col_mgr.get_member_manager(collection)\n\nnew_access_level = CollectionAccessLevel.ReadWrite\nmember_manager.modify_access_level("username2", new_access_level)\n'))),(0,r.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'CollectionMemberManager memberManager = colMgr.getMemberManager(collection);\n\nCollectionAccessLevel newAccessLevel = CollectionAccessLevel.ReadWrite;\nmemberManager.modifyAccessLevel("username2", newAccessLevel);\n'))),(0,r.kt)(s.Z,{value:"kt",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val memberManager = colMgr.getMemberManager(collection)\n\nval newAccessLevel = CollectionAccessLevel.ReadWrite\nmemberManager.modifyAccessLevel("username2", newAccessLevel)\n'))),(0,r.kt)(s.Z,{value:"c",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'EtebaseCollectionMemberManager *member_manager = etebase_collection_manager_get_member_manager(col_mgr, col);\n\netebase_collection_member_manager_modify_access_level(member_manager, "username2", ETEBASE_COLLECTION_ACCESS_LEVEL_READ_WRITE);\n\netebase_collection_member_manager_destroy(member_manager);\n'))),(0,r.kt)(s.Z,{value:"rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let member_manager = collection_manager.member_manager(collection)?;\n\nlet new_access_level = CollectionAccessLevel::ReadWrite;\nmember_manager.modify_access_level("username2", new_access_level)?;\n')))),(0,r.kt)("h3",{id:"revoking-access"},"Revoking access"),(0,r.kt)(o.Z,{mdxType:"CodeTabs"},(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const memberManager = collectionManager.getMemberManager(collection);\n\nawait memberManager.remove("username2");\n'))),(0,r.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'member_manager = col_mgr.get_member_manager(collection)\n\nmember_manager.remove("username2")\n'))),(0,r.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'CollectionMemberManager memberManager = colMgr.getMemberManager(collection);\n\nmemberManager.remove("username2");\n'))),(0,r.kt)(s.Z,{value:"kt",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val memberManager = colMgr.getMemberManager(collection)\n\nmemberManager.remove("username2")\n'))),(0,r.kt)(s.Z,{value:"c",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'EtebaseCollectionMemberManager *member_manager = etebase_collection_manager_get_member_manager(col_mgr, col);\n\netebase_collection_member_manager_remove(member_manager, "username2");\n\netebase_collection_member_manager_destroy(member_manager);\n'))),(0,r.kt)(s.Z,{value:"rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let member_manager = collection_manager.member_manager(collection)?;\n\nmember_manager.remove("username2")?;\n')))),(0,r.kt)("h2",{id:"iterating-through-responses"},"Iterating through responses"),(0,r.kt)("p",null,"Like with the rest of the Etebase API, list responses can be iterated through in smaller chunks.\nHere is how it's done for outgoing invitations, but the same can be done for incoming invitations and collection members."),(0,r.kt)(o.Z,{mdxType:"CodeTabs"},(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const invitationManager = etebase.getInvitationManager();\n\nlet iterator = null;\nwhile (true) {\n  const items = await invitationManager.listOutgoing({ iterator, limit: 30 });\n  iterator = items.iterator;\n\n  processOutgoingInvitations(items.data);\n\n  if (items.done) {\n    break;\n  }\n}\n"))),(0,r.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"invitation_manager = etebase.get_invitation_manager()\n\niterator = None\ndone = False\nwhile not done:\n    fetch_options = FetchOptions().iterator(iterator).limit(30)\n    invitations = invitation_manager.list_outgoing(fetch_options)\n    iterator = invitations.iterator\n    done = invitations.done\n\n    process_outgoing_invitations(invitations.data)\n"))),(0,r.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"String iterator = null;\nboolean done = false;\nwhile (!done) {\n    InvitationListResponse invitations = itemManager.listOutgoing(new FetchOptions().iterator(iterator).limit(30));\n    iterator = invitations.getIterator();\n    done = invitations.isDone();\n\n    processOutgoingInvitations(invitations.getData());\n}\n"))),(0,r.kt)(s.Z,{value:"kt",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"var iterator: String? = null\nvar done = false\nwhile (!done) {\n    val invitations = itemManager.listOutgoing(item, FetchOptions().iterator(iterator).limit(30))\n    iterator = invitations.iterator\n    done = invitations.isDone\n\n    processOutgoingInvitations(invitations.data)\n}\n"))),(0,r.kt)(s.Z,{value:"c",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"char *iterator = NULL;\nbool done = 0;\nwhile (!done) {\n    EtebaseFetchOptions *fetch_options = etebase_fetch_options_new();\n    etebase_fetch_options_set_iterator(fetch_options, iterator);\n    etebase_fetch_options_set_limit(fetch_options, 30);\n    EtebaseInvitationListResponse *invitations = etebase_invitation_manager_list_outgoing(invitation_manager, fetch_options);\n\n    if (iterator) {\n        free(iterator);\n    }\n    iterator = strdup(etebase_invitation_list_response_get_iterator(invitations));\n    done = etebase_invitation_list_response_is_done(invitations);\n\n    uintptr_t data_len =\n        etebase_invitation_list_response_get_data_length(invitations);\n    const EtebaseSignedInvitation *data[data_len];\n    etebase_invitation_list_response_get_data(invitations, data);\n\n    process_revisions(data, data_len);\n\n    etebase_fetch_options_destroy(fetch_options);\n    etebase_invitation_list_response_destroy(invitations);\n}\n\nif (iterator) {\n    free(iterator);\n}\n"))),(0,r.kt)(s.Z,{value:"rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let mut iterator: Option<&str> = None;\nlet mut invitations: IteratorListResponse<SignedInvitation>;\nloop {\n    invitations = invitation_manager.list_outgoing(\n        Some(&FetchOptions::new().iterator(iterator).limit(30))\n    )?;\n    iterator = invitations.iterator();\n\n    process_outgoing_invitations(invitations.data());\n    if invitations.done() {\n        break\n    }\n}\n")))))}b.isMDXComponent=!0}}]);