"use strict";(self.webpackChunketebase_docs=self.webpackChunketebase_docs||[]).push([[787],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return p}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),m=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=m(e.components);return i.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},v=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),v=m(n),p=a,d=v["".concat(l,".").concat(p)]||v[p]||u[p]||r;return n?i.createElement(d,s(s({ref:t},c),{},{components:n})):i.createElement(d,s({ref:t},c))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=v;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var m=2;m<r;m++)s[m]=n[m];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}v.displayName="MDXCreateElement"},8215:function(e,t,n){n.d(t,{Z:function(){return a}});var i=n(7294);function a(e){var t=e.children,n=e.hidden,a=e.className;return i.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},3709:function(e,t,n){n.d(t,{Z:function(){return u}});var i=n(7294),a=n(7462),r=n(2389),s=n(5979),o=n(6010),l="tabItem_LplD";function m(e){var t,n,r,m=e.lazy,c=e.block,u=e.defaultValue,v=e.values,p=e.groupId,d=e.className,_=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=v?v:_.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),g=(0,s.lx)(f,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===u?u:null!=(t=null!=u?u:null==(n=_.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(r=_[0])?void 0:r.props.value;if(null!==b&&!f.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var h=(0,s.UB)(),y=h.tabGroupChoices,k=h.setTabGroupChoices,w=(0,i.useState)(b),T=w[0],N=w[1],E=[],I=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=p){var R=y[p];null!=R&&R!==T&&f.some((function(e){return e.value===R}))&&N(R)}var O=function(e){var t=e.currentTarget,n=E.indexOf(t),i=f[n].value;i!==T&&(I(t),N(i),null!=p&&k(p,i))},j=function(e){var t,n=null;switch(e.key){case"ArrowRight":var i=E.indexOf(e.currentTarget)+1;n=E[i]||E[0];break;case"ArrowLeft":var a=E.indexOf(e.currentTarget)-1;n=E[a]||E[E.length-1]}null==(t=n)||t.focus()};return i.createElement("div",{className:"tabs-container"},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":c},d)},f.map((function(e){var t=e.value,n=e.label,r=e.attributes;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return E.push(e)},onKeyDown:j,onFocus:O,onClick:O},r,{className:(0,o.Z)("tabs__item",l,null==r?void 0:r.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),m?(0,i.cloneElement)(_.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):i.createElement("div",{className:"margin-vert--md"},_.map((function(e,t){return(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function c(e){var t=(0,r.Z)();return i.createElement(m,(0,a.Z)({key:String(t)},e))}function u(e){var t=e.children;return i.createElement(c,{defaultValue:"js",groupId:"programming-language",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Java",value:"java"},{label:"Kotlin",value:"kt"},{label:"C/C++",value:"c"},{label:"Rust",value:"rs"}]},t)}},1810:function(e,t,n){n.r(t),n.d(t,{assets:function(){return v},contentTitle:function(){return c},default:function(){return _},frontMatter:function(){return m},metadata:function(){return u},toc:function(){return p}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),s=n(3709),o=n(8215),l=["components"],m={title:"Revision history"},c=void 0,u={unversionedId:"guides/revisions",id:"guides/revisions",title:"Revision history",description:"Every time you change a collection or an item, a new revision is created in Etebase. Each revision is a snapshot of the collection or item at that point in time so you can easily view and rollback changes.",source:"@site/docs/guides/revisions.mdx",sourceDirName:"guides",slug:"/guides/revisions",permalink:"/guides/revisions",editUrl:"https://github.com/etesync/etebase-docs/edit/master/docs/guides/revisions.mdx",tags:[],version:"current",frontMatter:{title:"Revision history"},sidebar:"someSidebar",previous:{title:"Collection Sharing",permalink:"/guides/collection_sharing"},next:{title:"Local Cache",permalink:"/guides/local_cache"}},v={},p=[{value:"Listing revisions",id:"listing-revisions",level:2},{value:"Iterating through revisions",id:"iterating-through-revisions",level:2}],d={toc:p};function _(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Every time you change a collection or an item, a new revision is created in Etebase. Each revision is a snapshot of the collection or item at that point in time so you can easily view and rollback changes."),(0,r.kt)("p",null,"This is very useful if you would like to offer a change history to your users, or even if you just want to make sure your data is never lost, even if you make a mistake."),(0,r.kt)("h2",{id:"listing-revisions"},"Listing revisions"),(0,r.kt)("p",null,"Listing revisions returns normal items you can then manipulate like any others. The items are sorted newest to oldest."),(0,r.kt)(s.Z,{mdxType:"CodeTabs"},(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const item = await itemManager.create(\n  { type: "file", },\n  "First draft",\n);\nawait itemManager.batch([item]);\n\nitem.setContent("Second draft");\nawait itemManager.batch([item]);\n\nconst revisions = await itemManager.itemRevisions(item);\nassert(revisions.data.length === 2);\n\n// Revisions are normal items so we can use them as such\nconst content = await revisions.data[1].getContent();\nassert(content === "First draft");\n\n\n// Collections are just items, so for collection revisions:\nconst collectionRevisions = await itemManager.itemRevisions(collection.item);\n'))),(0,r.kt)(o.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'item = item_mgr.create(\n    {\n        "type": "file",\n    },\n    b"First draft"\n)\nitem_mgr.batch([item])\n\nitem.content = b"Second draft"\nitem_mgr.batch([item])\n\nrevisions = item_mgr.item_revisions(item)\nassert(len(list(revisions.data)) == 2)\n\n# Revisions are normal items so we can use them as such\ncontent = list(revisions.data)[1].content\nassert(content == b"First draft")\n\n\n# Collections are just items, so for collection revisions:\ncol_revisions = item_mgr.item_revisions(collection.item)\n'))),(0,r.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ItemMetadata meta = new ItemMetadata();\nmeta.setType("file");\nItem item = itemManager.create(meta, "First draft");\nitemManager.batch(new Item[] {item});\n\nitem.setContent("Second draft");\nitemManager.batch(new Item[] {item});\n\nItemRevisionsListResponse revisions = itemManager.itemRevisions(item);\nassert(revisions.getData().length == 2);\n\n// Revisions are normal items so we can use them as such\nString content = revisions.getData()[1].getContentString();\nassert(content === "First draft");\n\n\n// Collections are just items, so for collection revisions:\nItemRevisionsListResponse collectionRevisions = itemManager.itemRevisions(collection.getItem());\n'))),(0,r.kt)(o.Z,{value:"kt",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val meta = new ItemMetadata()\nmeta.setType("file")\nval item = itemManager.create(meta, "First draft")\nitemManager.batch(arrayOf(item))\n\nitem.content = "Second draft"\nitemManager.batch(arrayOf(item))\n\nval revisions = itemManager.itemRevisions(item)\nassert(revisions.data.length == 2)\n\n// Revisions are normal items so we can use them as such\nval content = revisions.data[1].contentString\nassert(content === "First draft")\n\n\n// Collections are just items, so for collection revisions:\nval collectionRevisions = itemManager.itemRevisions(collection.item)\n'))),(0,r.kt)(o.Z,{value:"c",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'EtebaseItemMetadata *item_meta = etebase_item_metadata_new();\netebase_item_metadata_set_item_type(item_meta, "file");\nconst char item_content[] = "First draft";\nEtebaseItem *item = etebase_item_manager_create(item_mgr, item_meta, item_content, strlen(item_content));\netebase_item_metadata_destroy(item_meta);\n\nconst EtebaseItem *items[] = { item };\netebase_item_manager_batch(item_mgr, items, ETEBASE_UTILS_C_ARRAY_LEN(items), NULL, 0, NULL);\n\n{\n    const char tmp[] = "Second draft";\n    etebase_item_set_content(item, tmp, strlen(tmp));\n\n    const EtebaseItem *items[] = { item };\n    etebase_item_manager_batch(item_mgr, items, ETEBASE_UTILS_C_ARRAY_LEN(items), NULL, 0, NULL);\n}\n\nEtebaseItemRevisionsListResponse *revisions = etebase_item_manager_item_revisions(item_mgr, item, NULL);\n\nuintptr_t list_len = etebase_item_revisions_list_response_get_data_length(revisions);\nassert_int_eq(1, list_len);\n\n{\n    // Revisions are normal items so we can use them as such\n    const EtebaseItem *list_items[list_len];\n    etebase_item_revisions_list_response_get_data(revisions, list_items);\n    char content2[100];\n    intptr_t content2_size = etebase_item_get_content(list_items[0], &content2, sizeof(content2));\n    content2[content2_size] = 0;\n    // This is true: content2 == "First draft"\n}\n\n// Collections are just items, so for collection revisions:\nEtebaseItem *col_item = etebase_collection_as_item(col);\nEtebaseItemRevisionsListResponse *revisions = etebase_item_manager_item_revisions(item_mgr, col_item, NULL);\n'))),(0,r.kt)(o.Z,{value:"rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let mut meta = ItemMetadata::new();\nmeta.set_item_type("file");\nlet mut item = item_manager.create(&meta, b"First draft")?;\nitem_manager.batch(vec![&item].into_iter(), None)?;\n\nitem.set_content(b"Second draft")?;\nitem_manager.batch(vec![&item].into_iter(), None)?;\n\nlet revisions = item_manager.item_revisions(&item, None)?;\nassert_eq!(revisions.data().len(), 2);\n\n// Revisions are normal items so we can use them as such\nlet content = revisions.data()[1].content()?;\nassert_eq!(content, b"First draft");\n\n\n// Collections are just items, so for collection revisions:\nlet collection_revisions = item_manager.item_revisions(&collection.item()?, None);\n')))),(0,r.kt)("h2",{id:"iterating-through-revisions"},"Iterating through revisions"),(0,r.kt)("p",null,"Like the rest of the API, revisions can be iterated over."),(0,r.kt)(s.Z,{mdxType:"CodeTabs"},(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let iterator = null;\nwhile (true) {\n  const revisions = await itemManager.itemRevisions(item, { iterator, limit: 5 });\n  iterator = revisions.iterator;\n\n  processRevisions(revisions.data);\n\n  if (revisions.done) {\n    break;\n  }\n}\n"))),(0,r.kt)(o.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"item_mgr = col_mgr.get_item_manager(collection)\nitem = ...\n\niterator = None\ndone = False\nwhile not done:\n    fetch_options = FetchOptions().iterator(iterator).limit(30)\n    revisions = item_mgr.item_revisions(item, fetch_options)\n    iterator = revisions.iterator\n    done = revisions.done\n\n    process_revisions(revisions.data)\n"))),(0,r.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"String iterator = null;\nboolean done = false;\nwhile (!done) {\n    ItemListResponse revisions = itemManager.itemRevisions(new FetchOptions().iterator(iterator).limit(30));\n    iterator = revisions.getIterator();\n    done = revisions.isDone();\n\n    processRevisions(revisions.getData());\n}\n"))),(0,r.kt)(o.Z,{value:"kt",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"var iterator: String? = null\nvar done = false\nwhile (!done) {\n    val revisions = itemManager.itemRevisions(item, FetchOptions().iterator(iterator).limit(30))\n    iterator = revisions.iterator\n    done = revisions.isDone\n\n    processRevisions(revisions.data)\n}\n"))),(0,r.kt)(o.Z,{value:"c",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"char *iterator = NULL;\nbool done = 0;\nwhile (!done) {\n    EtebaseFetchOptions *fetch_options = etebase_fetch_options_new();\n    etebase_fetch_options_set_iterator(fetch_options, iterator);\n    etebase_fetch_options_set_limit(fetch_options, 30);\n    EtebaseItemRevisionsListResponse *revisions = etebase_item_manager_list(item_mgr, fetch_options);\n\n    if (iterator) {\n        free(iterator);\n    }\n    iterator = strdup(etebase_item_revisions_list_response_get_iterator(revisions));\n    done = etebase_item_revisions_list_response_is_done(revisions);\n\n    uintptr_t data_len = etebase_item_revisions_list_response_get_data_length(revisions);\n    const EtebaseItem *data[data_len];\n    etebase_item_revisions_list_response_get_data(revisions, data);\n\n    process_revisions(data, data_len);\n\n    etebase_fetch_options_destroy(fetch_options);\n    etebase_item_revisions_list_response_destroy(revisions);\n}\n\nif (iterator) {\n    free(iterator);\n}\n"))),(0,r.kt)(o.Z,{value:"rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let mut iterator: Option<&str> = None;\nlet mut revisions: IteratorListResponse<Item>;\nloop {\n    revisions = item_manager.item_revisions(&item, \n        Some(&FetchOptions::new().iterator(iterator).limit(30))\n    )?;\n    iterator = revisions.iterator();\n\n    process_revisions(revisions.data());\n    if revisions.done() {\n        break\n    }\n}\n")))))}_.isMDXComponent=!0}}]);