"use strict";(self.webpackChunketebase_docs=self.webpackChunketebase_docs||[]).push([[949],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(n),d=s,v=m["".concat(i,".").concat(d)]||m[d]||p[d]||r;return n?a.createElement(v,l(l({ref:t},u),{},{components:n})):a.createElement(v,l({ref:t},u))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:s,l[1]=o;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8215:function(e,t,n){n.d(t,{Z:function(){return s}});var a=n(7294);function s(e){var t=e.children,n=e.hidden,s=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:s},t)}},3709:function(e,t,n){n.d(t,{Z:function(){return p}});var a=n(7294),s=n(7462),r=n(2389),l=n(5979),o=n(6010),i="tabItem_LplD";function c(e){var t,n,r,c=e.lazy,u=e.block,p=e.defaultValue,m=e.values,d=e.groupId,v=e.className,b=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=m?m:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),g=(0,l.lx)(k,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var h=null===p?p:null!=(t=null!=p?p:null==(n=b.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(r=b[0])?void 0:r.props.value;if(null!==h&&!k.some((function(e){return e.value===h})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+h+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,l.UB)(),f=y.tabGroupChoices,w=y.setTabGroupChoices,N=(0,a.useState)(h),_=N[0],T=N[1],C=[],x=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var A=f[d];null!=A&&A!==_&&k.some((function(e){return e.value===A}))&&T(A)}var E=function(e){var t=e.currentTarget,n=C.indexOf(t),a=k[n].value;a!==_&&(x(t),T(a),null!=d&&w(d,a))},Z=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=C.indexOf(e.currentTarget)+1;n=C[a]||C[0];break;case"ArrowLeft":var s=C.indexOf(e.currentTarget)-1;n=C[s]||C[C.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":u},v)},k.map((function(e){var t=e.value,n=e.label,r=e.attributes;return a.createElement("li",(0,s.Z)({role:"tab",tabIndex:_===t?0:-1,"aria-selected":_===t,key:t,ref:function(e){return C.push(e)},onKeyDown:Z,onFocus:E,onClick:E},r,{className:(0,o.Z)("tabs__item",i,null==r?void 0:r.className,{"tabs__item--active":_===t})}),null!=n?n:t)}))),c?(0,a.cloneElement)(b.filter((function(e){return e.props.value===_}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},b.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==_})}))))}function u(e){var t=(0,r.Z)();return a.createElement(c,(0,s.Z)({key:String(t)},e))}function p(e){var t=e.children;return a.createElement(u,{defaultValue:"js",groupId:"programming-language",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"Java",value:"java"},{label:"Kotlin",value:"kt"},{label:"C/C++",value:"c"},{label:"Rust",value:"rs"}]},t)}},8804:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return u},default:function(){return b},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return d}});var a=n(7462),s=n(3366),r=(n(7294),n(3905)),l=n(3709),o=n(8215),i=["components"],c={title:"Authentication"},u=void 0,p={unversionedId:"guides/basic_authentication",id:"guides/basic_authentication",title:"Authentication",description:"Etebase automatically takes care of the encryption for you, securely deriving an encryption key from the user password. It then also creates an asymmetric keypair to login so the password never leaves the user's device.",source:"@site/docs/guides/basic_authentication.mdx",sourceDirName:"guides",slug:"/guides/basic_authentication",permalink:"/guides/basic_authentication",editUrl:"https://github.com/etesync/etebase-docs/edit/master/docs/guides/basic_authentication.mdx",tags:[],version:"current",frontMatter:{title:"Authentication"},sidebar:"someSidebar",previous:{title:"Quickstart",permalink:"/quickstart"},next:{title:"Using Collections",permalink:"/guides/using_collections"}},m={},d=[{value:"Signup",id:"signup",level:2},{value:"Login",id:"login",level:2},{value:"Change password",id:"change-password",level:2},{value:"Logout",id:"logout",level:2},{value:"Session save and restore",id:"session-save-and-restore",level:2},{value:"Encrypting the stored session",id:"encrypting-the-stored-session",level:3},{value:"Email as username",id:"email-as-username",level:2},{value:"Using custom servers",id:"using-custom-servers",level:2},{value:"Checking custom server URLs",id:"checking-custom-server-urls",level:3},{value:"Forcing server URL for local development",id:"forcing-server-url-for-local-development",level:3}],v={toc:d};function b(e){var t=e.components,n=(0,s.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Etebase automatically takes care of the encryption for you, securely deriving an encryption key from the user password. It then also creates an asymmetric keypair to login so the password never leaves the user's device."),(0,r.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Please note that all of the operations in this page are slow and may take a few seconds to complete depending on your device. This is because Etebase ",(0,r.kt)("strong",{parentName:"p"},"purposefully")," uses a slow function (",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Argon2"},"Argon2id"),") to derive a secure encryption key from the user password."),(0,r.kt)("p",{parentName:"div"},"Luckily they can be avoided almost entirely for most use-cases. Please take a look at ",(0,r.kt)("a",{parentName:"p",href:"#session-save-and-restore"},"session save and restore")," for more information."))),(0,r.kt)("h2",{id:"signup"},"Signup"),(0,r.kt)("p",null,"Sign up is just one easy call which returns an instance of the main etebase class."),(0,r.kt)("p",null,"When using a private server, make sure that either sign up is enabled, or that you have created a user beforehand using the Django Admin panel."),(0,r.kt)(l.Z,{mdxType:"CodeTabs"},(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// serverUrl can be obtained from the dashboard (or omitted for default)\nconst etebase = await Etebase.Account.signup({\n  username: "username",\n  email: "email"\n}, "password", serverUrl);\n'))),(0,r.kt)(o.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from etebase import Client, Account, User\n\n# server_url can be obtained from the dashboard (or omitted for default)\nclient = Client("client-name", server_url)\nuser = User("username", "test@example.com")\netebase = Account.signup(client, user, "password")\n'))),(0,r.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.etebase.client.*;\nimport okhttp3.OkHttpClient;\n\nOkHttpClient httpClient = new OkHttpClient.Builder().build();\n\nUser user = new User("username", "text@example.com");\n// serverUrl can obtained from the dashboard (or null for default)\nClient client = Client.create(httpClient, serverUrl);\nAccount etebase = Account.signup(client, user, "password");\n'))),(0,r.kt)(o.Z,{value:"kt",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import com.etebase.client.*\nimport okhttp3.OkHttpClient;\n\nval httpClient: OkHttpClient = Builder().build()\n\nval user = User("username", "text@example.com")\n// serverUrl can obtained from the dashboard (or null for default)\nval client = Client.create(httpClient, serverUrl)\nval etebase = Account.signup(client, user, "password")\n'))),(0,r.kt)(o.Z,{value:"c",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'// Your personal server url can be obtained from the dashboard\nconst char *server_url = etebase_get_default_server_url();\nEtebaseClient *client = etebase_client_new("client-name", server_url);\nEtebaseUser *user = etebase_user_new("username", "test@example.com");\nEtebaseAccount *etebase = etebase_account_signup(client, user, "password");\n'))),(0,r.kt)(o.Z,{value:"rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use etebase::{Account, Client, User};\n\nlet user = User::new("username", "text@example.com");\nlet client = Client::new(..., server_url)?;\nlet etebase = Account::signup(client, user, "password")?;\n')))),(0,r.kt)("h2",{id:"login"},"Login"),(0,r.kt)("p",null,"Login is also just one easy call which returns an instance of the main etebase class."),(0,r.kt)(l.Z,{mdxType:"CodeTabs"},(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// serverUrl can be obtained from the dashboard (or omitted for default)\nconst etebase = await Etebase.Account.login("username", "password", serverUrl);\n'))),(0,r.kt)(o.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from etebase import Client, Account\n\n# server_url can be obtained from the dashboard (or omitted for default)\nclient = Client("client-name", server_url)\netebase = Account.login(client, "username", "password")\n'))),(0,r.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.etebase.client.*;\nimport okhttp3.OkHttpClient;\n\nOkHttpClient httpClient =  new OkHttpClient.Builder().build();\n\n// serverUrl can obtained from the dashboard (or null for default)\nClient client = Client.create(httpClient, serverUrl);\nAccount etebase = Account.login(client, "username", "password");\n'))),(0,r.kt)(o.Z,{value:"kt",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import com.etebase.client.*\nimport okhttp3.OkHttpClient;\n\nval httpClient: OkHttpClient = Builder().build()\n\n// serverUrl can obtained from the dashboard (or null for default)\nval client = Client.create(httpClient, serverUrl)\nval etebase = Account.login(client, "username", "password")\n'))),(0,r.kt)(o.Z,{value:"c",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'// Your personal server url can be obtained from the dashboard\nconst char *server_url = etebase_get_default_server_url();\nEtebaseClient *client = etebase_client_new("client-name", server_url);\nEtebaseAccount *etebase = etebase_account_login(client, "username", "password");\n'))),(0,r.kt)(o.Z,{value:"rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use etebase::{Account, Client};\n\nlet client = Client::new(..., server_url)?;\nlet etebase = Account::login(client, "username", "password")?;\n')))),(0,r.kt)("h2",{id:"change-password"},"Change password"),(0,r.kt)("p",null,"Unlike signup and login, changing password requires an already set up etebase object."),(0,r.kt)(l.Z,{mdxType:"CodeTabs"},(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'await etebase.changePassword("new password");\n'))),(0,r.kt)(o.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'etebase.change_password("new password")\n'))),(0,r.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'etebase.changePassword("new password");\n'))),(0,r.kt)(o.Z,{value:"kt",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'etebase.changePassword("new password")\n'))),(0,r.kt)(o.Z,{value:"c",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'etebase_account_change_password(account, "new password");\n'))),(0,r.kt)(o.Z,{value:"rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'etebase.change_password("new password")?;\n')))),(0,r.kt)("h2",{id:"logout"},"Logout"),(0,r.kt)(l.Z,{mdxType:"CodeTabs"},(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"await etebase.logout();\n"))),(0,r.kt)(o.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"etebase.logout()\n"))),(0,r.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"etebase.logout();\n"))),(0,r.kt)(o.Z,{value:"kt",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"etebase.logout()\n"))),(0,r.kt)(o.Z,{value:"c",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"etebase_account_logout(account);\n"))),(0,r.kt)(o.Z,{value:"rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"etebase.logout()?;\n")))),(0,r.kt)("h2",{id:"session-save-and-restore"},"Session save and restore"),(0,r.kt)("p",null,"Most apps can't, or don't want the user to enter their passwords every time they are opened, that's why Etebase supports saving and restoring sessions."),(0,r.kt)("p",null,"Saving and restoring a session is as simple as:"),(0,r.kt)(l.Z,{mdxType:"CodeTabs"},(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const etebase = await Etebase.Account.login("username", "password", serverUrl);\nconst savedSession = await etebase.save();\n\n// Later on...\nconst etebase = await Etebase.Account.restore(savedSession);\n'))),(0,r.kt)(o.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from etebase import Client, Account\n\nclient = Client("client-name", server_url)\netebase = Account.login(client, "username", "password")\n\nstored_session = etebase.save(None)\n\n# later on...\netebase = Account.restore(client, stored_session, None)\n'))),(0,r.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.etebase.client.*;\n\nClient client = Client.create(httpClient, serverUrl);\nAccount etebase = Account.login(client, "username", "password");\n\nString storedSession = etebase.save(null);\n\n// later on...\nAccount etebase = Account.restore(client, storedSession, null);\n'))),(0,r.kt)(o.Z,{value:"kt",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import com.etebase.client.*\n\nval client = Client.create(httpClient, serverUrl)\nval etebase = Account.login(client, "username", "password")\n\nval storedSession = etebase.save(null)\n\n// later on...\nval etebase = Account.restore(client, storedSession, null)\n'))),(0,r.kt)(o.Z,{value:"c",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'const char *server_url = etebase_get_default_server_url();\nEtebaseClient *client = etebase_client_new("client-name", server_url);\nEtebaseAccount *etebase = etebase_account_login(client, "username", "password");\n\nchar *stored_session = etebase_account_save(etebase, NULL, 0);\n\n// later on...\nEtebaseAccount *etebase = etebase_account_restore(client, stored_session, NULL, 0);\nfree(stored_session);\n'))),(0,r.kt)(o.Z,{value:"rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use etebase::{Account, Client};\n\nlet client = Client::new(..., server_url)?;\nlet etebase = Account::login(client, "username", "password")?;\n\nlet stored_session = etebase.save(None)?;\n\n// later on...\nlet etebase = Account::restore(client, stored_session, None)?;\n')))),(0,r.kt)("h3",{id:"encrypting-the-stored-session"},"Encrypting the stored session"),(0,r.kt)("p",null,"While the above works, it's advised to encrypt the stored session with a randomly generated key that is\nstored securely (e.g. in the operating system's key store), or securely derived from a user storage password."),(0,r.kt)(l.Z,{mdxType:"CodeTabs"},(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const etebase = await Etebase.Account.login("username", "password");\n\n// Save the key somewhere safe (e.g. the OS\'s key store)\nconst encryptionKey = Etebase.randomBytes(32);\nconst savedSession = await etebase.save(encryptionKey);\n\n// Later on...\nconst etebase = await Etebase.Account.restore(savedSession, encryptionKey);\n'))),(0,r.kt)(o.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from etebase import Client, Account, random_bytes\n\nclient = Client("client-name")\netebase = Account.login(client, "username", "password")\n\n# Save the key somewhere safe (e.g. the OS\'s key store)\nencryption_key = random_bytes(32)\nstored_session = etebase.save(encryption_key)\n\n# later on...\netebase = Account.restore(client, stored_session, encryption_key)\n'))),(0,r.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.etebase.client.*;\n\nClient client = Client.create(httpClient, null);\nAccount etebase = Account.login(client, "username", "password");\n\n// Save the key somewhere safe (e.g. the OS\'s key store)\nbyte[] encryptionKey = Utils.randomBytes(32);\nString storedSession = etebase.save(encryptionKey);\n\n// later on...\nAccount etebase = Account.restore(client, storedSession, encryptionKey);\n'))),(0,r.kt)(o.Z,{value:"kt",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import com.etebase.client.*\n\nval client = Client.create(httpClient, null)\nval etebase = Account.login(client, "username", "password")\n\n// Save the key somewhere safe (e.g. the OS\'s key store)\nval encryptionKey = Utils.randomBytes(32)\nval storedSession = etebase.save(encryptionKey)\n\n// later on...\nval etebase = Account.restore(client, storedSession, encryptionKey)\n'))),(0,r.kt)(o.Z,{value:"c",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'const char *server_url = etebase_get_default_server_url();\nEtebaseClient *client = etebase_client_new("client-name", server_url);\nEtebaseAccount *etebase = etebase_account_login(client, "username", "password");\n\n// Save the key somewhere safe (e.g. the OS\'s key store)\nchar encryption_key[32];\netebase_utils_randombytes(encryption_key, sizeof(encryption_key));\nchar *stored_session = etebase_account_save(etebase,encryption_key, sizeof(encryption_key));\n\n// later on...\nEtebaseAccount *etebase = etebase_account_restore(client, stored_session, encryption_key, sizeof(encryption_key));\nfree(stored_session);\n'))),(0,r.kt)(o.Z,{value:"rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use etebase::{Account, Client, utils};\n\nlet client = Client::new(..., server_url)?;\nlet etebase = Account::login(client, "username", "password")?;\n\n// Save the key somewhere safe (e.g. the OS\'s key store)\nlet encryption_key = utils::randombytes(32);\nlet stored_session = etebase.save(Some(encryption_key))?;\n\n// later on...\nlet etebase = Account::restore(client, stored_session, Some(encryption_key))?;\n')))),(0,r.kt)("h2",{id:"email-as-username"},"Email as username"),(0,r.kt)("p",null,"In some cases you don't want a separate username, and would instead like users to be able to login using just their email address. Etebase supports this out of the box, just pass the email instead of the username in the ",(0,r.kt)("inlineCode",{parentName:"p"},"login")," and anywhere else where Etebase accepts a username."),(0,r.kt)("p",null,"Etebase however still needs a unique username passed to it during signup, though it can just be randomly generated. So for example, you can use ",(0,r.kt)("a",{parentName:"p",href:"../api/utilities"},"the Etebase utils")," to generate a username like shown in this psuedo-code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"username = toBase64(randomBytes(24));\n")),(0,r.kt)("h2",{id:"using-custom-servers"},"Using custom servers"),(0,r.kt)("h3",{id:"checking-custom-server-urls"},"Checking custom server URLs"),(0,r.kt)("p",null,"The login and signup operations above automatically check whether the URL passed is pointing to a valid Etebase server. However, some applications need to know if the URL is pointing to a valid server before asking for credentials. This function does exactly that."),(0,r.kt)(l.Z,{mdxType:"CodeTabs"},(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const isEtebase = await Etebase.Account.isEtebaseServer("https://example.com");\n'))),(0,r.kt)(o.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from etebase import Client, Account\n\nclient = Client("client-name", "https://example.com")\nis_etebase = Account.is_etebase_server(client)\n'))),(0,r.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.etebase.client.*;\nimport okhttp3.OkHttpClient;\n\nOkHttpClient httpClient =  new OkHttpClient.Builder().build();\n\nClient client = Client.create(httpClient, "https://example.com");\nboolean isEtebase = Account.isEtebaseServer(client);\n'))),(0,r.kt)(o.Z,{value:"kt",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import com.etebase.client.*\nimport okhttp3.OkHttpClient;\n\nval httpClient: OkHttpClient = Builder().build()\n\nval client = Client.create(httpClient, "https://example.com")\nval isEtebase = Account.isEtebaseServer(client)\n'))),(0,r.kt)(o.Z,{value:"c",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'EtebaseClient *client = etebase_client_new("client-name", "https://example.com");\n\n// Returns 0 if client is pointing an etebase server, 1 if not, -1 on error\nint32_t is_etebase = etebase_account_check_etebase_server(client);\n'))),(0,r.kt)(o.Z,{value:"rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use etebase::{Account, Client};\n\nlet client = Client::new(..., server_url)?;\n\nlet is_etebase = Account::is_etebase_server(client)?;\n")))),(0,r.kt)("h3",{id:"forcing-server-url-for-local-development"},"Forcing server URL for local development"),(0,r.kt)("p",null,"When saving etebase instances with ",(0,r.kt)("inlineCode",{parentName:"p"},"cacheSave")," the server URL is also being saved. This is not an issue in production as the URL of the server is unlikely to change, however, when developing against a local server it's often useful to force the server URL without having to login again."),(0,r.kt)(l.Z,{mdxType:"CodeTabs"},(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const etebase = await Etebase.Account.restore(savedSession);\netebase.serverUrl = "http://new-development-server";\n'))),(0,r.kt)(o.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'etebase = Account.restore(client, stored_session, None)\netebase.force_server_url("http://new-development-server")\n'))),(0,r.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Account etebase = Account.restore(client, storedSession, null);\netebase.forceServerUrl("http://new-development-server");\n'))),(0,r.kt)(o.Z,{value:"kt",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val etebase = Account.restore(client, storedSession, null)\netebase.forceServerUrl("http://new-development-server")\n'))),(0,r.kt)(o.Z,{value:"c",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'EtebaseAccount *etebase = etebase_account_restore(client, stored_session, NULL, 0);\netebase_account_force_server_url(etebase, "http://new-development-server");\n'))),(0,r.kt)(o.Z,{value:"rs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let mut etebase = Account::restore(client, stored_session, None)?;\netebase.force_server_url("http://new-development-server")?;\n')))))}b.isMDXComponent=!0}}]);