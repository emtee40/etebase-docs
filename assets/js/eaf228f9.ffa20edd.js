"use strict";(self.webpackChunketebase_docs=self.webpackChunketebase_docs||[]).push([[653],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=c(n),m=r,d=h["".concat(s,".").concat(m)]||h[m]||u[m]||i;return n?o.createElement(d,a(a({ref:t},p),{},{components:n})):o.createElement(d,a({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8595:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],l={title:"Fetching Data"},s=void 0,c={unversionedId:"protocol-specs/fetching-data",id:"protocol-specs/fetching-data",title:"Fetching Data",description:"There are a lot of common patterns throughout the Etebase API. This document defines some of the common concepts that used in the following sections.",source:"@site/docs/protocol-specs/fetching-data.md",sourceDirName:"protocol-specs",slug:"/protocol-specs/fetching-data",permalink:"/protocol-specs/fetching-data",editUrl:"https://github.com/etesync/etebase-docs/edit/master/docs/protocol-specs/fetching-data.md",tags:[],version:"current",frontMatter:{title:"Fetching Data"},sidebar:"someSidebar",previous:{title:"Authentication",permalink:"/protocol-specs/authentication"},next:{title:"Collections",permalink:"/protocol-specs/collections"}},p={},u=[{value:"Stoken",id:"stoken",level:2},{value:"Fetch Options",id:"fetch-options",level:2},{value:"List Responses",id:"list-responses",level:2}],h={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"There are a lot of common patterns throughout the Etebase API. This document defines some of the common concepts that used in the following sections."),(0,i.kt)("h2",{id:"stoken"},"Stoken"),(0,i.kt)("p",null,"As described in ",(0,i.kt)("a",{parentName:"p",href:"/overview"},"the overview"),", stokens are opaque identifiers that mark a point-in-time of the data. It's commonly used to only fetch items that have changed since the last fetch."),(0,i.kt)("h2",{id:"fetch-options"},"Fetch Options"),(0,i.kt)("p",null,"Fetch options let clients modify the behaviour of requests to the server. They are passed as ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Query_string"},"query parameters")," when making the request."),(0,i.kt)("p",null,"Here are the supported values:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"limit"),": limit the amount of results when fetching a list."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stoken"),": limit the results based on the ",(0,i.kt)("inlineCode",{parentName:"li"},"stoken")," (only return newer results)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"iterator"),": filter results when iterating on long lists (similar to ",(0,i.kt)("inlineCode",{parentName:"li"},"stoken"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"prefetch"),": indicate to the server how much data to prefetch. This is useful for when you know you will need (or not) the content so you can pre-fetch the data accordingly. Values:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"auto")," (default): the server decides how to prefetch data."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"medium"),": fetch items and their list of chunks, but not the content itself."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"withCollection"),": whether to also fetch the collection's main item when fetching the list of items. More on that in later sections.")),(0,i.kt)("h2",{id:"list-responses"},"List Responses"),(0,i.kt)("p",null,"Lists in the API come in one of two forms:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"StokenListResponse<T> {\n    data: [T]\n    done: bool,\n    stoken: Option<str>,\n}\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"IteratorListResponse<T> {\n    data: [T]\n    done: bool,\n    iterator: Option<str>,\n}\n")),(0,i.kt)("p",null,"They are essentially the same, with the only difference being the usage of ",(0,i.kt)("inlineCode",{parentName:"p"},"stoken")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"iterator")," for filtering data."),(0,i.kt)("p",null,"Here is a full description of the fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"data"),": a list of type ",(0,i.kt)("inlineCode",{parentName:"li"},"T")," of the data being returned (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"Collection"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"done"),": whether there are no more items to fetch"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stoken"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"iterator"),": the ",(0,i.kt)("inlineCode",{parentName:"li"},"stoken")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"iterator")," relating to this fetch that can be used to fetch the next batch of items.")))}m.isMDXComponent=!0}}]);